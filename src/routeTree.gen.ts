/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ListListTypeRouteImport } from './routes/$list/$listType'
import { Route as NovelNovelIndexRouteImport } from './routes/novel/$novel/index'
import { Route as NovelNovelChapterRouteImport } from './routes/novel/$novel/$chapter'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ListListTypeRoute = ListListTypeRouteImport.update({
  id: '/$list/$listType',
  path: '/$list/$listType',
  getParentRoute: () => rootRouteImport,
} as any)
const NovelNovelIndexRoute = NovelNovelIndexRouteImport.update({
  id: '/novel/$novel/',
  path: '/novel/$novel/',
  getParentRoute: () => rootRouteImport,
} as any)
const NovelNovelChapterRoute = NovelNovelChapterRouteImport.update({
  id: '/novel/$novel/$chapter',
  path: '/novel/$novel/$chapter',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$list/$listType': typeof ListListTypeRoute
  '/novel/$novel/$chapter': typeof NovelNovelChapterRoute
  '/novel/$novel': typeof NovelNovelIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$list/$listType': typeof ListListTypeRoute
  '/novel/$novel/$chapter': typeof NovelNovelChapterRoute
  '/novel/$novel': typeof NovelNovelIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$list/$listType': typeof ListListTypeRoute
  '/novel/$novel/$chapter': typeof NovelNovelChapterRoute
  '/novel/$novel/': typeof NovelNovelIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$list/$listType'
    | '/novel/$novel/$chapter'
    | '/novel/$novel'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$list/$listType' | '/novel/$novel/$chapter' | '/novel/$novel'
  id:
    | '__root__'
    | '/'
    | '/$list/$listType'
    | '/novel/$novel/$chapter'
    | '/novel/$novel/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ListListTypeRoute: typeof ListListTypeRoute
  NovelNovelChapterRoute: typeof NovelNovelChapterRoute
  NovelNovelIndexRoute: typeof NovelNovelIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$list/$listType': {
      id: '/$list/$listType'
      path: '/$list/$listType'
      fullPath: '/$list/$listType'
      preLoaderRoute: typeof ListListTypeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/novel/$novel/': {
      id: '/novel/$novel/'
      path: '/novel/$novel'
      fullPath: '/novel/$novel'
      preLoaderRoute: typeof NovelNovelIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/novel/$novel/$chapter': {
      id: '/novel/$novel/$chapter'
      path: '/novel/$novel/$chapter'
      fullPath: '/novel/$novel/$chapter'
      preLoaderRoute: typeof NovelNovelChapterRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ListListTypeRoute: ListListTypeRoute,
  NovelNovelChapterRoute: NovelNovelChapterRoute,
  NovelNovelIndexRoute: NovelNovelIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
